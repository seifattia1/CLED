@page
@model CLED.Pages.problemOutputModel
@{
    Layout = "_Layout";
}

<div class="container-fluid bg-primary mb-5">
    <div class="d-flex flex-column align-items-center justify-content-center " style="min-height: 160px">
        <h3 class="display-3 font-weight-bold text-white">CLED - Illustrator</h3>
    </div>
</div>

<div class="container-fluid pt-5">
    <div class="container">
        <div class="text-center pb-2">
            <p class="section-title px-5"><span class="px-2">CLED</span></p>
            <h1 class="mb-4">Illustrator | << Problem Output >></h1>
        </div>
        <div class="wrapper">
            <div class="painter">
                <div class="jsgrid-row drawingToolbar bg-secondary text-light">
                    <div class="btn-toolbar">
                        <div class="btn-group mr-2" role="group">
                            <div id="undoComponent"></div>

                            <div id="deleteComponent" title="Delete"></div>
                            <button id="b" title="save" class="btn btn-success">
                                <i class="fa fa-save d-inline"></i>
                                <span>Save</span>
                            </button>
                        </div>
                    </div>
                    <div class="btn-toolbar">
                        <label class="col-form-label controlLabel">Tools:</label>
                        <div class="d-inline-block">
                            <div class="btn-group btn-group-toggle" role="group" data-toggle="buttons" aria-label="Drawing Components">
                                <div id="polylineDisplayComponent"></div>
                                <div id="lineDisplayComponent"></div>
                                <div id="rectangleDisplayComponent"></div>
                                <div id="ovalDisplayComponent"></div>
                                <div id="triangleDisplayComponent"></div>
                                <div id="textDisplayComponent"></div>
                            </div>
                        </div>
                    </div>
                    <div class="separator"></div>
                    <div class="btn-toolbar">
                        <label class="col-form-label controlLabel d-inline">Size:</label>
                        <div id="lineThicknessComponent"></div>

                        <div class="separator"></div>

                        <label class="col-form-label controlLabel d-inline">Style:</label>
                        <div id="lineTypeComponent"></div>

                        <div class="separator"></div>

                        <label class="col-form-label controlLabel d-inline">Lines:</label>
                        <div id="lineColorComponent"></div>

                        <div class="separator"></div>

                        <label class="col-form-label controlLabel ">Fill:</label>
                        <div id="fillColorComponent"></div>
                    </div>
                </div>

                <div class="jsgrid-row editorContainer">
                    <div class="CanvasContainer" id="CanvasContainer">
                        <div id="canvas">
                        </div>
                    </div>
                </div>
                <div class="jsgrid-row notificationBar noPrint">
                    <div class="col">
                        <div id="StatusBar" class="float-right"></div>
                    </div>
                </div>
            </div>
            <div id="images" class="library overflow-y-scroll">

                @{

                    string @urlpath = "";

                    if (Model.List7 != null)
                    {
                        foreach (var @a in Model.List7)
                        {
                            string[] ad = a.ToArray();



                            foreach (var item in a)
                            {

                                if (((item.Contains("http://")) || item.Contains("https://")))
                                {
                                    int i = Int32.Parse(ad[3]);
                                    urlpath = @item.ToString();
                                    if ((ad[1] != "PROPN"))
                                    {
                                        <img draggable="true" onload="loadImg('@urlpath');" src="@urlpath" class="img-responsive" style="height: 75px; width: 150px;" />
                                    }

                                }
                            }
                            if ((ad[1] == "PROPN"))
                            {
                                urlpath = ad[0].ToString();

                                <img draggable="true" onload="loadImg('@urlpath');" src="@urlpath" class="img-responsive" style="height: 75px; width: 150px;" />
                            }
                        }


                    }
                    else
                    {
                        RedirectToPage("ProblemeInput");
                    }

                }

            </div>
        </div>
    </div>

</div>


@section Scripts{

    <script>
        var editor;
        var savingLocked = false;
        const savingMessage = '<div id="Saving"><i class="fa fa-spin fa-cog "></i>Saving...</div>';
        $(function () {
            //Calculate canvas height as a function of the window size.

            //Instantiate our new editor
            //The canvas is created inside this constructor, using the selector passed.
            editor = new DrawingEditor('canvas', '747px', '1103px');
            //Create a list of available display components
            const components = [
                { id: '#lineDisplayComponent', type: 'line' },
                { id: '#rectangleDisplayComponent', type: 'rect' },
                { id: '#ovalDisplayComponent', type: 'oval' },
                { id: '#triangleDisplayComponent', type: 'tria' },
                { id: '#textDisplayComponent', type: 'text' },
                { id: '#polylineDisplayComponent', type: 'polyline' },
                { id: '#deleteComponent', type: 'delete' },
                { id: 'fillColorComponent', type: 'fillColorChooser' },
                { id: 'lineColorComponent', type: 'lineColorChooser' },
                { id: 'lineTypeComponent', type: 'lineType' },
                { id: 'lineThicknessComponent', type: 'lineThickness' },
                { id: '#undoComponent', type: 'undo' },
                { id: '#redoComponent', type: 'redo' }
            ];
            //Add the components to the DrawingEditor, which will render them.
            editor.addComponents(components);
            $('#lineDisplayComponent').click();
            $("html").on('keydown', function (event) {
                const key = event.key;
                if (key == "Delete") {
                    editor.deleteSelected();

                }
            });
        });

        function handleDragStart(e) {
            [].forEach.call(images, function (img) {
                img.classList.remove('img_dragging');
            });
            this.classList.add('img_dragging');
        }

        function handleDragOver(e) {
            if (e.preventDefault) {
                e.preventDefault(); // Necessary. Allows us to drop.
            }

            e.dataTransfer.dropEffect = 'copy'; // See the section on the DataTransfer object.
            // NOTE: comment above refers to the article (see top) -natchiketa

            return false;
        }

        function handleDragEnter(e) {
            // this / e.target is the current hover target.
            this.classList.add('over');
        }

        function handleDragLeave(e) {
            this.classList.remove('over'); // this / e.target is previous target element.
        }

        function handleDrop(e) {
            // this / e.target is current target element.

            if (e.stopPropagation) {
                e.stopPropagation(); // stops the browser from redirecting.
            }

            var img = document.querySelector('#images img.img_dragging');

            console.log('event: ', e);

            var newImage = new fabric.Image(img, {
            });
            newImage.set({
                left: 0,
                top: 0,
                with: 300,
                height: 300,
            });


            editor.canvas.add(newImage);

            return false;
        }

        function handleDragEnd(e) {
            // this/e.target is the source node.
            [].forEach.call(images, function (img) {
                img.classList.remove('img_dragging');
            });
        }

        if (Modernizr.draganddrop) {
            // Browser supports HTML5 DnD.

            // Bind the event listeners for the image elements
            var images = document.querySelectorAll('#images img');
            [].forEach.call(images, function (img) {
                img.addEventListener('dragstart', handleDragStart, false);
                img.addEventListener('dragend', handleDragEnd, false);
            });
            // Bind the event listeners for the canvas
            var canvasContainer = document.getElementById('CanvasContainer');
            canvasContainer.addEventListener('dragenter', handleDragEnter, false);
            canvasContainer.addEventListener('dragover', handleDragOver, false);
            canvasContainer.addEventListener('dragleave', handleDragLeave, false);
            canvasContainer.addEventListener('drop', handleDrop, false);
        } else {
            // Replace with a fallback to a library solution.
            alert("This browser doesn't support the HTML5 Drag and Drop API.");
        }

        /*
        NOTE: the start and end handlers are events for the <img> elements; the rest are bound to
        the canvas container.
        */
        $("#b").click(function () {
            var image = this.editor.canvas.toDataURL("image/png").replace("image/png", "image/octet-stream");  // here is the most important part because if you dont replace you will get a DOM 18 exception.
            window.location.href = image;
        });

    </script>



}



